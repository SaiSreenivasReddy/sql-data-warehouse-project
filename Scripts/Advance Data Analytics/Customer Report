-- ------------------------------------------------
-- Customer Report on Gold Tables
-- ------------------------------------------------

/*

Purpose:
This customer report view consolidates and summarizes customer-level data from the Gold tables to provide detailed insights into customer profiles, purchasing behaviors, relationship duration, and segmentation. It supports targeted customer analysis and strategic decision-making.

Key Steps:
- **Transaction Data Aggregation:** Collect and summarize customer transactions including order counts, total sales, product diversity, and total quantity purchased.
- **Customer Profiling:** Calculate key customer attributes such as age, recency (months since last order), average order value, and average monthly spend.
- **Age Group Segmentation:** Classify customers into meaningful age groups to enable age-based analysis.
- **Customer Segmentation:** Segment customers into VIP, Regular, and New categories based on their total sales and relationship lifespan.
- **KPI Computation:** Calculate important KPIs like lifespan, recency, average order value, and average monthly spend to better understand customer engagement and value.

Workflow:
The report is built in sequential steps starting from joining detailed transaction and customer data, aggregating it to the customer level, and enriching it with segmentation and KPIs. The output is stored as a reusable SQL view for reporting and dashboarding.

Importance:
This analysis provides a comprehensive customer overview that is essential for customer retention strategies, loyalty program targeting, personalized marketing, and lifecycle management. It enables data-driven decisions by providing actionable customer insights.

Usage:
Use this view to support customer-centric dashboards, segmentation analysis, marketing campaigns, and executive reports. Run the view on validated Gold layer data for accurate and up-to-date insights.

*/


CREATE VIEW gold_customers_report AS 

-- Step 1: Prepare detailed customer transaction data
WITH report_query AS (
    SELECT 
        f.order_number,
        f.product_key,
        f.order_date,
        f.sales,
        f.quantity,
        c.customer_key,
        c.customer_number,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_customers AS c ON f.customer_key = c.customer_key
    WHERE order_date > '1000-01-01'
),

-- Step 2: Aggregate customer-level KPIs
customer_aggregation AS (
    SELECT 
        customer_key,
        customer_number,
        customer_name,
        age,
        COUNT(DISTINCT order_number) AS total_orders,
        SUM(sales) AS total_sales,
        SUM(quantity) AS total_quantity,
        COUNT(DISTINCT product_key) AS total_products,
        MAX(order_date) AS last_order_date,
        TIMESTAMPDIFF(MONTH, MIN(order_date), MAX(order_date)) AS lifespan
    FROM report_query
    GROUP BY customer_key, customer_number, customer_name, age
)

-- Step 3: Final customer report with segmentation and KPIs
SELECT 
    customer_key,
    customer_number,
    customer_name,
    age,
    
    -- Age Group Segmentation
    CASE
        WHEN age < 20 THEN 'Below 20'
        WHEN age BETWEEN 20 AND 29 THEN '20-30'
        WHEN age BETWEEN 30 AND 39 THEN '30-39'
        WHEN age BETWEEN 40 AND 49 THEN '40-49'
        ELSE '50 and Above'
    END AS age_group, 
    
    -- Customer Segmentation
    CASE
        WHEN lifespan >= 12 AND total_sales > 5000 THEN 'VIP'
        WHEN lifespan >= 12 AND total_sales <= 5000 THEN 'Regular'
        ELSE 'New'
    END AS customer_segmentation,
    
    last_order_date,
    
    -- Months since last order
    TIMESTAMPDIFF(MONTH, last_order_date, CURDATE()) AS recency,
    
    total_orders,
    total_sales,
    total_quantity,
    total_products,
    lifespan,
    
    -- Average order value
    CASE
        WHEN total_sales = 0 THEN 0
        ELSE total_sales / total_orders
    END AS avg_order_value,
    
    -- Average monthly spend
    CASE
        WHEN lifespan = 0 THEN total_sales
        ELSE total_sales / lifespan
    END AS avg_monthly_spend

FROM customer_aggregation;
