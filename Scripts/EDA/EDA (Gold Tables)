-- -----------------------------------------------
-- Exploratory Data Analysis (EDA) on Gold Tables
-- -----------------------------------------------

-- Schema Exploration: Get the list of all available tables
SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Schema Exploration: Get detailed column information of the 'gold_dim_customers' table
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'gold_dim_customers';

-- ------------------------------------------------
-- Dimension Exploration: Unique Values Check
-- ------------------------------------------------

-- Retrieve unique list of countries from customer dimension table
SELECT DISTINCT country FROM gold_dim_customers;

-- Retrieve unique product categories from product dimension table
SELECT DISTINCT category FROM gold_dim_products;

-- Retrieve unique category and sub-category combinations from product dimension table
SELECT DISTINCT category, sub_category FROM gold_dim_products;

-- Retrieve the complete product hierarchy: category, sub-category, and product names
SELECT DISTINCT category, sub_category, product_name
FROM gold_dim_products
ORDER BY 1, 2, 3;

-- ------------------------------------------------
-- Date Range Analysis
-- ------------------------------------------------

-- Find the overall sales transaction period: minimum and maximum order dates, and the span in years
SELECT 
    MIN(order_date),
    MAX(order_date),
    TIMESTAMPDIFF(year, MIN(order_date), MAX(order_date)) AS sales_year_span
FROM gold_fact_sales;

-- Find the oldest and youngest customer ages based on birth dates
SELECT 
    MIN(birth_date) AS oldest_birth_date,
    TIMESTAMPDIFF(year, MIN(birth_date), CURDATE()) AS oldest_age,
    MAX(birth_date) AS youngest_birth_date,
    TIMESTAMPDIFF(year, MAX(birth_date), CURDATE()) AS youngest_age
FROM gold_dim_customers;

-- ------------------------------------------------
-- Measures Exploration: Business Metrics
-- ------------------------------------------------

-- Calculate total sales revenue
SELECT SUM(sales) AS total_sales FROM gold_fact_sales;

-- Calculate total quantity of items sold
SELECT SUM(quantity) AS total_quantity_sold FROM gold_fact_sales;

-- Calculate average selling price per item
SELECT AVG(price) AS average_selling_price FROM gold_fact_sales;

-- Calculate total number of sales orders (all orders and distinct orders)
SELECT COUNT(order_number) AS total_orders FROM gold_fact_sales;
SELECT COUNT(DISTINCT order_number) AS unique_orders FROM gold_fact_sales;

-- Calculate total number of products available
SELECT COUNT(product_key) AS total_products FROM gold_dim_products;
SELECT COUNT(DISTINCT product_key) AS unique_products FROM gold_dim_products;

-- Calculate total number of customers in the database
SELECT COUNT(customer_key) AS total_customers FROM gold_dim_customers;

-- Calculate total number of unique customers who have placed at least one order
SELECT COUNT(DISTINCT customer_key) AS customers_with_orders FROM gold_fact_sales;

-- ------------------------------------------------
-- Key Business Metrics Summary
-- ------------------------------------------------

-- Summary of key business metrics in a single query
SELECT 'Total_Sales' AS measure_name, SUM(sales) FROM gold_fact_sales
UNION ALL
SELECT 'Total_Quantity', SUM(quantity) FROM gold_fact_sales
UNION ALL
SELECT 'Average_Price', AVG(price) FROM gold_fact_sales
UNION ALL
SELECT 'Total_Orders', COUNT(DISTINCT order_number) FROM gold_fact_sales
UNION ALL 
SELECT 'NoOf_Products', COUNT(DISTINCT product_key) FROM gold_dim_products
UNION ALL 
SELECT 'NoOf_Customers', COUNT(customer_key) FROM gold_dim_customers
UNION ALL
SELECT 'Customers_Placed_Order', COUNT(DISTINCT customer_key) FROM gold_fact_sales;

-- ------------------------------------------------
-- Magnitude Analysis: Customer and Product Distribution
-- ------------------------------------------------

-- Find total number of customers by country
SELECT 
    country,
    COUNT(customer_key) AS total_customers
FROM gold_dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total number of customers by gender
SELECT
    gender,
    COUNT(customer_key) AS total_customers
FROM gold_dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total number of products by category
SELECT
    category,
    COUNT(product_key) AS total_products
FROM gold_dim_products
GROUP BY category
ORDER BY total_products DESC;

-- Find average cost of products in each category
SELECT
    category,
    AVG(cost) AS average_cost
FROM gold_dim_products
GROUP BY category
ORDER BY average_cost DESC;

-- Find total revenue generated by each product category
SELECT
    p.category,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
    ON f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Find total revenue generated by each customer
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_customers AS c
    ON f.customer_key = c.customer_key
GROUP BY 
    c.customer_id,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- Find total sales (quantity sold) across each country
SELECT 
    c.country,
    SUM(s.quantity) AS total_sales
FROM gold_fact_sales AS s
LEFT JOIN gold_dim_customers AS c
    ON s.customer_key = c.customer_key
GROUP BY country
ORDER BY total_sales DESC;

-- ------------------------------------------------
-- Ranking Analysis: Top-N and Bottom-N Performance
-- ------------------------------------------------

-- Top 5 products generating the highest revenue
SELECT
    p.product_name,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
    ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;

-- Top 5 products by revenue using ROW_NUMBER()
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(f.sales) DESC) AS product_rank
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_products AS p
        ON f.product_key = p.product_key
    GROUP BY p.product_name
) t
WHERE product_rank <= 5;

-- Bottom 5 products generating the lowest revenue
SELECT
    p.product_name,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
    ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue
LIMIT 5;

-- Bottom 5 products by revenue using ROW_NUMBER()
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(f.sales)) AS product_rank
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_products AS p
        ON f.product_key = p.product_key
    GROUP BY p.product_name
) t
WHERE product_rank <= 5;

-- Top 5 sub-categories generating the highest revenue
SELECT
    p.sub_category,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
    ON f.product_key = p.product_key
GROUP BY p.sub_category
ORDER BY total_revenue DESC
LIMIT 5;

-- Top 5 sub-categories by revenue using ROW_NUMBER()
SELECT *
FROM (
    SELECT
        p.sub_category,
        SUM(f.sales) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(f.sales) DESC) AS product_rank
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_products AS p
        ON f.product_key = p.product_key
    GROUP BY p.sub_category
) t
WHERE product_rank <= 5;

-- Bottom 5 sub-categories generating the lowest revenue
SELECT
    p.sub_category,
    SUM(f.sales) AS total_revenue
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_products AS p
    ON f.product_key = p.product_key
GROUP BY p.sub_category
ORDER BY total_revenue
LIMIT 5;

-- Bottom 5 sub-categories by revenue using ROW_NUMBER()
SELECT *
FROM (
    SELECT
        p.sub_category,
        SUM(f.sales) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(f.sales)) AS product_rank
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_products AS p
        ON f.product_key = p.product_key
    GROUP BY p.sub_category
) t
WHERE product_rank <= 5;

-- Top 10 customers who generated the highest revenue
SELECT *
FROM (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(f.sales) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales) DESC) AS rank_sales
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_customers AS c
        ON f.customer_key = c.customer_key
    GROUP BY 
        c.customer_id,
        c.first_name,
        c.last_name
) t
WHERE rank_sales <= 10;

-- Customers who placed the fewest number of orders (Bottom 3)
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT f.order_number) AS total_orders
FROM gold_fact_sales AS f
LEFT JOIN gold_dim_customers AS c
    ON f.customer_key = c.customer_key
GROUP BY 
    c.customer_id,
    c.first_name,
    c.last_name
ORDER BY total_orders
LIMIT 3;

-- Bottom 3 customers by number of orders using RANK()
SELECT *
FROM (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        COUNT(DISTINCT f.order_number) AS total_orders,
        RANK() OVER (ORDER BY COUNT(DISTINCT f.order_number)) AS rank_sales
    FROM gold_fact_sales AS f
    LEFT JOIN gold_dim_customers AS c
        ON f.customer_key = c.customer_key
    GROUP BY 
        c.customer_id,
        c.first_name,
        c.last_name
) t
WHERE rank_sales <= 3;

-- -----------------------------------------------
-- End of EDA Script
-- -----------------------------------------------
